diff --git a/node_modules/@react-three/drei/web/Html.js b/node_modules/@react-three/drei/web/Html.js
index cdfeda8..181e020 100644
--- a/node_modules/@react-three/drei/web/Html.js
+++ b/node_modules/@react-three/drei/web/Html.js
@@ -1,6 +1,6 @@
 import _extends from '@babel/runtime/helpers/esm/extends';
 import * as React from 'react';
-import * as ReactDOM from 'react-dom/client';
+import * as ReactDOM from 'react-dom';
 import { Vector3, OrthographicCamera, PerspectiveCamera } from 'three';
 import { useThree, useFrame } from '@react-three/fiber';
 
@@ -109,26 +109,32 @@ const Html = /*#__PURE__*/React.forwardRef(({
   pointerEvents = 'auto',
   ...props
 }, ref) => {
-  const {
-    gl,
-    camera,
-    scene,
-    size,
-    raycaster,
-    events
-  } = useThree();
+  var _portal$current;
+
+  const gl = useThree(({
+    gl
+  }) => gl);
+  const camera = useThree(({
+    camera
+  }) => camera);
+  const scene = useThree(({
+    scene
+  }) => scene);
+  const size = useThree(({
+    size
+  }) => size);
+  const raycaster = useThree(({
+    raycaster
+  }) => raycaster);
   const [el] = React.useState(() => document.createElement(as));
-  const root = React.useRef();
   const group = React.useRef(null);
   const oldZoom = React.useRef(0);
   const oldPosition = React.useRef([0, 0]);
   const transformOuterRef = React.useRef(null);
-  const transformInnerRef = React.useRef(null); // Append to the connected element, which makes HTML work with views
-
-  const target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;
-  React.useLayoutEffect(() => {
+  const transformInnerRef = React.useRef(null);
+  const target = (_portal$current = portal == null ? void 0 : portal.current) !== null && _portal$current !== void 0 ? _portal$current : gl.domElement.parentNode;
+  React.useEffect(() => {
     if (group.current) {
-      const currentRoot = root.current = ReactDOM.createRoot(el);
       scene.updateMatrixWorld();
 
       if (transform) {
@@ -144,7 +150,7 @@ const Html = /*#__PURE__*/React.forwardRef(({
 
       return () => {
         if (target) target.removeChild(el);
-        currentRoot.unmount();
+        ReactDOM.unmountComponentAtNode(el);
       };
     }
   }, [target, transform]);
@@ -182,9 +188,7 @@ const Html = /*#__PURE__*/React.forwardRef(({
   }), [pointerEvents]);
   React.useLayoutEffect(() => {
     if (transform) {
-      var _root$current;
-
-      (_root$current = root.current) == null ? void 0 : _root$current.render( /*#__PURE__*/React.createElement("div", {
+      ReactDOM.render( /*#__PURE__*/React.createElement("div", {
         ref: transformOuterRef,
         style: styles
       }, /*#__PURE__*/React.createElement("div", {
@@ -195,16 +199,14 @@ const Html = /*#__PURE__*/React.forwardRef(({
         className: className,
         style: style,
         children: children
-      }))));
+      }))), el);
     } else {
-      var _root$current2;
-
-      (_root$current2 = root.current) == null ? void 0 : _root$current2.render( /*#__PURE__*/React.createElement("div", {
+      ReactDOM.render( /*#__PURE__*/React.createElement("div", {
         ref: ref,
         style: styles,
         className: className,
         children: children
-      }));
+      }), el);
     }
   });
   const visible = React.useRef(true);
